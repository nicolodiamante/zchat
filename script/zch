#
# Zchat - Streamline your terminal experience.
# By Nicolò Diamante <hello@nicolodiamante.com>
# https://github.com/nicolodiamante/zchat
# MIT License
#

zch() {
  if ! command -v jq >/dev/null; then
    echo "zchat: jq is not found on your system. Please install jq and try again."
    return 1
  fi

    if ! command -v curl &> /dev/null && ! command -v wget &> /dev/null; then
    echo ""
    echo "Error: curl or wget is not installed"
    zle reset-prompt
    return 1
  fi

  if [[ -z "$OPENAI_API_KEY" ]]; then
    echo "zchat: the OPENAI_API_KEY appears to be missing. Please provide a valid API key and try again."
    return 1
  fi

  if [[ -z "$OPENAI_GPT_MODEL" ]]; then
    echo -e "zchat: It appears that the OPENAI_GPT_MODEL setting in your .zshrc file is not specified.\nAs a default, this script operates using the GPT-4-Turbo model.\nWhen comparing performance, the GPT-4 and GPT-3.5 models are similarly effective in handling less complex tasks. However, for scenarios requiring intricate reasoning, GPT-4 significantly outperforms GPT-3.5.\n\nPlease note, access to the GPT-4 API is granted only to APIs with a proven track record of successful payments. If you do not meet these requirements for GPT-4 access, the GPT-3.5-Turbo model is recommended as an alternative."

    return 1
  else
    chatGPT_model="$OPENAI_GPT_MODEL"
  fi

  zchat_get_distribution_name() {
    if [[ "$(uname)" -eq "Darwin" ]]; then
      echo "$(sw_vers -productName) $(sw_vers -productVersion)" 2>/dev/null
    else
      echo "$(cat /etc/*-release 2>/dev/null | grep PRETTY_NAME | cut -d'"' -f2)"
    fi
  }

  zchat_get_os_prompt_injection() {
    local OS=$(zchat_get_distribution_name)
    if [[ -n "$OS" ]]; then
      echo " for $OS"
    else
      echo ""
    fi
  }

# Request body.
  user_input="$@"
  model="$chatGPT_model"
  temperature=0.12
  top_p=1
  presence_penalty=0.0
  frequency_penalty=0.0
  max_tokens=256

  # Prompt.
  if [[ -d .git ]]; then
    message="As an advanced autocomplete AI named Zchat, specialized in Linux system management with a focus on GIT version control, your primary function is to assist the User in operating their Linux-based system. Your operational context is the active directory, which also functions as a GIT repository. Upon receiving a user query encapsulated in ${user_input}, your directive is to analyze and suggest the most appropriate GIT command. This command must be tailored for execution in the Linux terminal and be fully compatible with the ${OS} operating system variant in use. Your responses should be concise, limited strictly to providing the relevant GIT command without including explanations or clarifications. In situations where a suitable GIT command cannot be inferred or constructed from the user's input, issue the response 'zchat: failed to generate command', followed by a short phrase explaining the reason, such as 'due to ambiguous input' or 'lack of sufficient context'. This informs the user about the nature of the issue and the reason behind the inability to generate a relevant command."
  else
    message="As Zchat, an advanced autocomplete AI, you are designed to assist users with their Linux operating system, specializing in responding to Linux-related queries. When you receive a user's request, defined as ${user_input}, your task is to formulate an appropriate response in the form of a valid ${OS} command. Your response should be concise and presented as a single line of text, avoiding the use of code blocks or quotes. It's essential to consider the user's current directory context, represented by '.' or obtainable via the $(pwd) command, to ensure the relevance of your response. When suggesting commands, your primary focus should be the safety and integrity of the user's operating system. The commands you propose must not endanger the system's stability or security. Although combining multiple commands is acceptable, aim for simplicity and efficiency, preferring one-liner commands whenever feasible. In situations where you cannot generate a suitable command based on the user's input, your response should be 'zchat: failed to generate command', followed by a brief explanation, such as 'due to ambiguous input' or 'lack of sufficient context'. This provides the user with insight into the reason behind the failure to generate a relevant command."
  fi

  if command -v curl &> /dev/null; then
    response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "{
      \"model\": \"$model\",
      \"messages\": [{\"role\": \"user\", \"content\": \"$message\"}],
      \"temperature\": $temperature,
      \"top_p\": $top_p,
      \"max_tokens\": $max_tokens,
      \"presence_penalty\": $presence_penalty,
      \"frequency_penalty\": $frequency_penalty
    }")
  else
    response=$(wget -qO- "https://api.openai.com/v1/chat/completions" \
    --header="Content-Type: application/json" \
    --header="Authorization: Bearer $OPENAI_API_KEY" \
    --post-data="{
      \"model\": \"$model\",
      \"messages\": [{\"role\": \"user\", \"content\": \"$message\"}],
      \"temperature\": $temperature,
      \"top_p\": $top_p,
      \"max_tokens\": $max_tokens,
      \"presence_penalty\": $presence_penalty,
      \"frequency_penalty\": $frequency_penalty
    }")
  fi

  # Add some colour.
  autoload -Uz colors && colors
  promp_default='%F{green}›%f'
  promp_error='%F{red}›%f'

  ERROR_MESSAGE=$(printf "%s" "$response" | jq -r '(.error.message // "") | @json' | sed 's/^"//;s/"$//')
  COMMAND=$(printf "%s" "$response" | jq -r '(.choices[0].message.content // "") | @json' | sed 's/^"//;s/"$//')

  # Output prompt.
  if [[ -n "$ERROR_MESSAGE" ]]; then
    echo "Error: $ERROR_MESSAGE"
  elif [[ -n "$COMMAND" && -d .git ]]; then
    if [[ "$COMMAND" =~ ^git ]]; then
      print -P ""
      print -P "$promp_default $COMMAND"
      print -P ""
      eval "$COMMAND"
    else
      print -P "$promp_error output does not begin with git and it will not be executed."
      print -P "$COMMAND"
    fi
  elif [[ "$COMMAND" =~ "zchat: failed to generate command" || "$COMMAND" =~ "parse error:" ]]; then
    print -P "$promp_error unable to generate a command."
    print -P "$COMMAND"
  elif [[ -n "$COMMAND" ]]; then
    print -P ""
    print -P "$promp_default $COMMAND"
    print -P ""
    eval "$COMMAND"
  else
    print -P "$promp_error unexpected response."
    print -P "$COMMAND"
  fi
}
