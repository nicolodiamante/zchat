#
# Zchat - Streamline your terminal experience.
# By Nicolò Diamante <hello@nicolodiamante.com>
# https://github.com/nicolodiamante/zchat
# MIT License
#

zch() {
  if ! command -v jq >/dev/null; then
    echo "zchat: jq is not found on your system. Please install jq and try again."
    return 1
  fi

    if ! command -v curl &> /dev/null && ! command -v wget &> /dev/null; then
    echo ""
    echo "Error: curl or wget is not installed"
    zle reset-prompt
    return 1
  fi

  if [[ -z "$OPENAI_API_KEY" ]]; then
    echo "zchat: the OPENAI_API_KEY appears to be missing. Please provide a valid API key and try again."
    return 1
  fi

  if [[ -z "$OPENAI_GPT_MODEL" ]]; then
    echo "zchat: the OPENAI_GPT_MODEL appears not to be set. By default this script is set to used GPT-3.5-turbo model. For many basic tasks, the difference between GPT-4 and GPT-3.5 models is not significant. However, in more complex reasoning situations, GPT-4 is much more capable than any of previous models. If you want to use the latest model version GPT-4 you just need to change the current number to 4. Keep in mind  GPT-4 is currently in a limited beta and not everyone, even if they are on a paid plan, has access to GPT-4 API."
    return 1
  else
    chatGPT_model="$OPENAI_GPT_MODEL"
  fi

  zchat_get_distribution_name() {
    if [[ "$(uname)" -eq "Darwin" ]]; then
      echo "$(sw_vers -productName) $(sw_vers -productVersion)" 2>/dev/null
    else
      echo "$(cat /etc/*-release 2>/dev/null | grep PRETTY_NAME | cut -d'"' -f2)"
    fi
  }

  zchat_get_os_prompt_injection() {
    local OS=$(zchat_get_distribution_name)
    if [[ -n "$OS" ]]; then
      echo " for $OS"
    else
      echo ""
    fi
  }

# Request body.
  user_input="$@"
  model="$chatGPT_model"
  temperature=0.5
  top_p=0.0
  presence_penalty=0.0
  frequency_penalty=0.0
  max_tokens=257

  # Check if current directory is a Git repository.
  if [[ -d .git ]]; then
    message="You are Zchat, my autocomplete script, and your goal is to help me navigate my Linux system, starting from the current directory, which is a git repository. What GIT command should I copy and paste into the terminal in order to achieve the desired result of ${user_input}? Provide only a valid GIT command${OS}, and nothing else. You do not write any human-readable explanations. If you fail to answer, return 'zchat: failed to generate command'."
  else
    message="You are Zchat, my autocomplete script, and your task is to assist me in navigating my Linux. All the questions I'm asking will be related to this subject. Now, I'd like you to answer this: ${user_input}. Please provide a valid command${OS} as a single line of text (no code blocks, quotes, or anything else outside the command itself) that takes into consideration my current directory (using either '.' or $(pwd)) and doesn't put my system at risk in any way. It's acceptable to chain commands, but prioritize one-liners if possible. If you can't find a suitable command, answer with 'zchat: failed to generate command'."
  fi

  if command -v curl &> /dev/null; then
    response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "{
        \"model\": \"$model\",
        \"messages\": [{\"role\": \"user\", \"content\": \"$message\"}],
        \"temperature\": $temperature,
        \"top_p\": $top_p,
        \"max_tokens\": $max_tokens,
        \"presence_penalty\": $presence_penalty,
        \"frequency_penalty\": $frequency_penalty
    }")
  else
    response=$(wget -qO- "https://api.openai.com/v1/chat/completions" \
    --header="Content-Type: application/json" \
    --header="Authorization: Bearer $OPENAI_API_KEY" \
    --post-data="{
        \"model\": \"$model\",
        \"messages\": [{\"role\": \"user\", \"content\": \"$message\"}],
        \"temperature\": $temperature,
        \"top_p\": $top_p,
        \"max_tokens\": $max_tokens,
        \"presence_penalty\": $presence_penalty,
        \"frequency_penalty\": $frequency_penalty
    }")
  fi

  # Add some colour.
  autoload -Uz colors && colors
  promp_default='%F{green}→%f'
  promp_error='%F{red}→%f'

  ERROR_MESSAGE=$(printf "%s" "$response" | jq -r '(.error.message // "") | @json' | sed 's/^"//;s/"$//')
  COMMAND=$(printf "%s" "$response" | jq -r '(.choices[0].message.content // "") | @json' | sed 's/^"//;s/"$//')

  # Output prompt.
  if [[ -n "$ERROR_MESSAGE" ]]; then
    echo "Error: $ERROR_MESSAGE"
  elif [[ -n "$COMMAND" && -d .git ]]; then
    if [[ "$COMMAND" =~ ^git ]]; then
      print -P "$promp_default $COMMAND"
      read -q "REPLY?  Execute command? (y/n) "
      if [[ "$REPLY" =~ ^[Yy]$ ]]; then
        echo
        eval "$COMMAND"
      else
        echo
        print -P "$promp_error command not executed."
      fi
    else
      print -P "$promp_error output does not begin with git and it will not be executed."
      print -P "$COMMAND"
    fi
  elif [[ "$COMMAND" =~ "zchat: failed to generate command" || "$COMMAND" =~ "parse error:" ]]; then
    print -P "$promp_error unable to generate a command."
    print -P "$COMMAND"
  elif [[ -n "$COMMAND" ]]; then
    print -P "$promp_default $COMMAND"
    eval "$COMMAND"
  else
    print -P "$promp_error unexpected response."
    print -P "$COMMAND"
  fi
}
