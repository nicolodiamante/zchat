#
# Zchat - Streamline your terminal experience.
# By Nicolò Diamante <hello@nicolodiamante.com>
# https://github.com/nicolodiamante/zchat
# MIT License
#

zch() {
  if ! command -v jq >/dev/null; then
    echo "zchat: jq is not found on your system. Please install jq and try again."
    return 1
  fi

    if ! command -v curl &> /dev/null && ! command -v wget &> /dev/null; then
    echo ""
    echo "Error: curl or wget is not installed"
    zle reset-prompt
    return 1
  fi

  if [[ -z "$OPENAI_API_KEY" ]]; then
    echo "zchat: the OPENAI_API_KEY appears to be missing. Please provide a valid API key and try again."
    return 1
  fi

  if [[ -z "$OPENAI_GPT_MODEL" ]]; then
    echo "zchat: It seems the OPENAI_GPT_MODEL is not specified. By default, this script operates on the GPT-4 model. When compared, the performance of GPT-4 and GPT-3.5 models in handling less complex tasks shows negligible differences. However, when it comes to intricate reasoning scenarios, the GPT-4 model clearly outperforms its predecessors. Please note, that access to the GPT-4 API is limited to APIs that have a proven track record of successful payments. In the event that you don't meet the GPT-4 qualifications, it's recommended the use the GPT-3.5-Turbo model."
    return 1
  else
    chatGPT_model="$OPENAI_GPT_MODEL"
  fi

  zchat_get_distribution_name() {
    if [[ "$(uname)" -eq "Darwin" ]]; then
      echo "$(sw_vers -productName) $(sw_vers -productVersion)" 2>/dev/null
    else
      echo "$(cat /etc/*-release 2>/dev/null | grep PRETTY_NAME | cut -d'"' -f2)"
    fi
  }

  zchat_get_os_prompt_injection() {
    local OS=$(zchat_get_distribution_name)
    if [[ -n "$OS" ]]; then
      echo " for $OS"
    else
      echo ""
    fi
  }

# Request body.
  user_input="$@"
  model="$chatGPT_model"
  temperature=0.12
  top_p=1
  presence_penalty=0.0
  frequency_penalty=0.0
  max_tokens=256

  # Prompt.
  if [[ -d .git ]]; then
    message="As an advanced autocomplete program named Zchat, your duty is to assist the User in managing their Linux operating system. Your operations start from the active directory, which serves as a GIT repository for controlling versions. When the User's query captured in ${user_input} is received, your task is to identify and suggest an appropriate GIT command that the user can execute in the Linux terminal. Bear in mind that the recommended command must be valid and compatible with the ${OS} operating system, excluding any supplementary information. Keep the responses limited to providing suitable GIT commands without any human-understandable clarifications or explanations. If you fail to infer or develop a GIT command based on the user’s input, respond with 'zchat: failed to generate command', signifying the unsuccessful generation of a suitable command."
  else
    message="You are to serve as Zchat, an autocomplete script that assists the user with their Linux operating system. Your primary role is to answer all of the user's questions about the Linux operating system. Accordingly, the user now needs your help, defined as ${user_input}, and asks for a response. The expected reply from you should be a valid ${OS} command, presented as a simple, single line of text. Please avoid using code blocks or quotes; maintain everything within the confines of the command you provide. The command you offer should take into account the user's current directory, identified by either a '.' or the command `$(pwd)`. Ensure that the command you suggest does not threaten the reliability or stability of the user's operating system. It's acceptable to link multiple commands if needed, but keep it as simple as possible - aim for one-liner commands when feasible. If you cannot create a suitable command based on the user's request, the appropriate response would be: 'zchat: failed to generate command'."
  fi

  if command -v curl &> /dev/null; then
    response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "{
        \"model\": \"$model\",
        \"messages\": [{\"role\": \"user\", \"content\": \"$message\"}],
        \"temperature\": $temperature,
        \"top_p\": $top_p,
        \"max_tokens\": $max_tokens,
        \"presence_penalty\": $presence_penalty,
        \"frequency_penalty\": $frequency_penalty
    }")
  else
    response=$(wget -qO- "https://api.openai.com/v1/chat/completions" \
    --header="Content-Type: application/json" \
    --header="Authorization: Bearer $OPENAI_API_KEY" \
    --post-data="{
        \"model\": \"$model\",
        \"messages\": [{\"role\": \"user\", \"content\": \"$message\"}],
        \"temperature\": $temperature,
        \"top_p\": $top_p,
        \"max_tokens\": $max_tokens,
        \"presence_penalty\": $presence_penalty,
        \"frequency_penalty\": $frequency_penalty
    }")
  fi

  # Add some colour.
  autoload -Uz colors && colors
  promp_default='%F{green}›%f'
  promp_error='%F{red}›%f'

  ERROR_MESSAGE=$(printf "%s" "$response" | jq -r '(.error.message // "") | @json' | sed 's/^"//;s/"$//')
  COMMAND=$(printf "%s" "$response" | jq -r '(.choices[0].message.content // "") | @json' | sed 's/^"//;s/"$//')

  # Output prompt.
  if [[ -n "$ERROR_MESSAGE" ]]; then
    echo "Error: $ERROR_MESSAGE"
  elif [[ -n "$COMMAND" && -d .git ]]; then
    if [[ "$COMMAND" =~ ^git ]]; then
      print -P ""
      print -P "$promp_default $COMMAND"
      print -P ""
      eval "$COMMAND"
    else
      print -P "$promp_error output does not begin with git and it will not be executed."
      print -P "$COMMAND"
    fi
  elif [[ "$COMMAND" =~ "zchat: failed to generate command" || "$COMMAND" =~ "parse error:" ]]; then
    print -P "$promp_error unable to generate a command."
    print -P "$COMMAND"
  elif [[ -n "$COMMAND" ]]; then
    print -P ""
    print -P "$promp_default $COMMAND"
    print -P ""
    eval "$COMMAND"
  else
    print -P "$promp_error unexpected response."
    print -P "$COMMAND"
  fi
}

unset zch
