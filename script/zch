#
# Zchat - Streamline your terminal experience.
# By Nicolò Diamante <hello@nicolodiamante.com>
# https://github.com/nicolodiamante/zchat
# MIT License
#

zch() {
  if ! command -v jq >/dev/null; then
    echo "zchat: jq is not found on your system. Please install jq and try again."
    return 1
  fi

    if ! command -v curl &> /dev/null && ! command -v wget &> /dev/null; then
    echo ""
    echo "Error: curl or wget is not installed"
    zle reset-prompt
    return 1
  fi

  if [[ -z "$OPENAI_API_KEY" ]]; then
    echo "zchat: the OPENAI_API_KEY appears to be missing. Please provide a valid API key and try again."
    return 1
  fi

  if [[ -z "$OPENAI_GPT_MODEL" ]]; then
    echo "zchat: It seems the OPENAI_GPT_MODEL is not specified. By default, this script operates on the GPT-4 model. Comparatively, the GPT-4 and GPT-3.5 models display minimal differences in performance for less complex tasks. However, GPT-4 significantly outshines previous models in handling intricate reasoning scenarios. It's important to note that only APIs with a record of successful payments can access the GPT-4 API. If the GPT-4 qualifications are not met, it's advisable to use the GPT-3.5-Turbo model."
    return 1
  else
    chatGPT_model="$OPENAI_GPT_MODEL"
  fi

  zchat_get_distribution_name() {
    if [[ "$(uname)" -eq "Darwin" ]]; then
      echo "$(sw_vers -productName) $(sw_vers -productVersion)" 2>/dev/null
    else
      echo "$(cat /etc/*-release 2>/dev/null | grep PRETTY_NAME | cut -d'"' -f2)"
    fi
  }

  zchat_get_os_prompt_injection() {
    local OS=$(zchat_get_distribution_name)
    if [[ -n "$OS" ]]; then
      echo " for $OS"
    else
      echo ""
    fi
  }

# Request body.
  user_input="$@"
  model="$chatGPT_model"
  temperature=0.16
  top_p=1
  presence_penalty=0.0
  frequency_penalty=0.0
  max_tokens=1024

  # Prompt.
  if [[ -d .git ]]; then
    message="As Zchat, your role is to act as an autocomplete program that assists me in managing my Linux operating system. Your base of operations begins from the currently active directory, which also doubles as a git repository for version control purposes. Upon receiving my inquiry captured in the variable ${user_input}, you have the task of identifying and recommending a suitable GIT command that I can input into the Linux terminal for execution. Keep in mind, the command issued should strictly be valid GIT software commands and pertinent to the ${OS} operating system. Ensure to exclude any additional information from the response and focus solely on delivering the mapped GIT commands. Your responses should, at all times, lack any explanation or clarifications that a human would find elucidative. In the event you are unable to deduce or produce a GIT command based on my input, it's required for you to give the following response: 'zchat: failed to generate command'. This will indicate that the formulation of a suitable command was unsuccessful."
  else
    message="You are to act as Zchat, an autocomplete script that I utilise as an aid in manoeuvring my Linux operating system. Your function largely revolves around fielding all queries that I have pertaining to the Linux operating system. In light of this, I now require your assistance - outlined as ${user_input} - and am requesting a response. The expected response from you should be a valid ${OS} command, to be presented as an uncomplicated, solitary line of text. Please abstain from the use of code blocks or quotes; keep everything within the scope of the command you provide. The command you propose should accommodate the consideration of my existing directory, which can be signified by either a simple '.' or the command `$(pwd)`. Make sure that the command you offer does not pose any risk to the integrity or stability of my operating system. It's agreeable to chain multiple commands together if necessary, but with a preferable emphasis placed on simplicity - aim to propose one-liner commands where possible. In the eventuality that you are unable to generate a suitable command based on my request, the appropriate response should be: 'zchat: failed to generate command'."
  fi

  if command -v curl &> /dev/null; then
    response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "{
        \"model\": \"$model\",
        \"messages\": [{\"role\": \"user\", \"content\": \"$message\"}],
        \"temperature\": $temperature,
        \"top_p\": $top_p,
        \"max_tokens\": $max_tokens,
        \"presence_penalty\": $presence_penalty,
        \"frequency_penalty\": $frequency_penalty
    }")
  else
    response=$(wget -qO- "https://api.openai.com/v1/chat/completions" \
    --header="Content-Type: application/json" \
    --header="Authorization: Bearer $OPENAI_API_KEY" \
    --post-data="{
        \"model\": \"$model\",
        \"messages\": [{\"role\": \"user\", \"content\": \"$message\"}],
        \"temperature\": $temperature,
        \"top_p\": $top_p,
        \"max_tokens\": $max_tokens,
        \"presence_penalty\": $presence_penalty,
        \"frequency_penalty\": $frequency_penalty
    }")
  fi

  # Add some colour.
  autoload -Uz colors && colors
  promp_default='%F{green}›%f'
  promp_error='%F{red}›%f'

  ERROR_MESSAGE=$(printf "%s" "$response" | jq -r '(.error.message // "") | @json' | sed 's/^"//;s/"$//')
  COMMAND=$(printf "%s" "$response" | jq -r '(.choices[0].message.content // "") | @json' | sed 's/^"//;s/"$//')

  # Output prompt.
  if [[ -n "$ERROR_MESSAGE" ]]; then
    echo "Error: $ERROR_MESSAGE"
  elif [[ -n "$COMMAND" && -d .git ]]; then
    if [[ "$COMMAND" =~ ^git ]]; then
      print -P ""
      print -P "$promp_default $COMMAND"
      print -P ""
      eval "$COMMAND"
    else
      print -P "$promp_error output does not begin with git and it will not be executed."
      print -P "$COMMAND"
    fi
  elif [[ "$COMMAND" =~ "zchat: failed to generate command" || "$COMMAND" =~ "parse error:" ]]; then
    print -P "$promp_error unable to generate a command."
    print -P "$COMMAND"
  elif [[ -n "$COMMAND" ]]; then
    print -P ""
    print -P "$promp_default $COMMAND"
    print -P ""
    eval "$COMMAND"
  else
    print -P "$promp_error unexpected response."
    print -P "$COMMAND"
  fi
}
